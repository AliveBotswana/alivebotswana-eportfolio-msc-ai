### CLUSTERING: Air BnB business analysis

# Importing dependencies
import kagglehub
from kagglehub import KaggleDatasetAdapter
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn as sns  
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

### Data Loading
Loading the NYC Airbnb dataset from Kaggle. (Data inspection and cleaning were handled in EDA; here we focus on clustering prep.)

# Load the dataset
df = kagglehub.load_dataset(KaggleDatasetAdapter.PANDAS, "dgomonov/new-york-city-airbnb-open-data", 'AB_NYC_2019.csv')

# Assuming EDA steps: Drop irrelevant columns and calculate occupancy_rate
# (For completeness; in group work, this was my other task.)
df = df.drop(['id', 'name', 'host_id', 'host_name', 'last_review', 'reviews_per_month'], axis=1, errors='ignore')
df['occupancy_rate'] = (365 - df['availability_365']) / 365 * 100

### Feature Selection and Preparation for Clustering
Selected key features for clustering to identify patterns in listings based on location, type, and usage metrics.

# Feature selection for clustering
cluster_features = ['neighbourhood_group', 'room_type', 'latitude', 'longitude',
                    'occupancy_rate', 'number_of_reviews', 'minimum_nights',
                    'calculated_host_listings_count']

# New dataframe for clustering
df_cluster = df[cluster_features].copy()

# Categorical variables encoding
df_cluster = pd.get_dummies(df_cluster, columns=['neighbourhood_group', 'room_type'], drop_first=True)

# Scale the numerical features (critical for K-Means)
scaler = StandardScaler()
df_cluster_scaled = scaler.fit_transform(df_cluster)

### Determining Optimal Number of Clusters
Tested k from 2 to 10 using Elbow (Inertia) and Silhouette Score methods.

# Define the range of k to test
k_range = range(2, 11)

# Lists to store metrics
inertias = []
silhouette_scores = []

for k in k_range:
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
    kmeans.fit(df_cluster_scaled)
    inertias.append(kmeans.inertia_)  # Within-cluster sum-of-squares
    silhouette_scores.append(silhouette_score(df_cluster_scaled, kmeans.labels_))

### Visualizing Cluster Evaluation Metrics

# Plot the Elbow Method
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
plt.plot(k_range, inertias, 'bx-')
plt.xlabel('Number of clusters (k)')
plt.ylabel('Inertia')
plt.title('Elbow Method')

# Plot the Silhouette Scores
plt.subplot(1, 2, 2)
plt.plot(k_range, silhouette_scores, 'rx-')
plt.xlabel('Number of clusters (k)')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Score')
plt.tight_layout()
plt.show()

### Fitting the Final K-Means Model
Based on evaluation, selected optimal_k = 5 (adjust as per Elbow/Silhouette analysis).

# Fit K-Means with the chosen k
optimal_k = 5  # Chosen based on plots (e.g., elbow at 4-5, highest silhouette around there)
final_kmeans = KMeans(n_clusters=optimal_k, random_state=42, n_init=10)
cluster_labels = final_kmeans.fit_predict(df_cluster_scaled)

# Add the cluster labels back to the original dataframe
df['cluster'] = cluster_labels

### Cluster Analysis Summary
Summary statistics for each cluster, including mean price, count, occupancy, and modes for categorical features.

# Analyze cluster characteristics
cluster_summary = df.groupby('cluster').agg({
    'price': ['mean', 'count'],
    'occupancy_rate': 'mean',
    'neighbourhood_group': lambda x: x.mode()[0],
    'room_type': lambda x: x.mode()[0],  # Most common room type
    'number_of_reviews': 'mean',
    'minimum_nights': 'mean'
}).round(2)

print(cluster_summary)

### Visualizations of Clusters
Geographic distribution and bar plots for average price and occupancy by cluster.

# Geographic Distribution
plt.figure(figsize=(10, 6))
scatter = plt.scatter(df['longitude'], df['latitude'], c=df['cluster'], cmap='tab10', alpha=0.6, s=2)
plt.colorbar(scatter, label='Cluster')
plt.title('Geographic Distribution of Airbnb Clusters')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.show()

# Average Price and Occupancy by Cluster
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))

# Price
df.groupby('cluster')['price'].mean().plot(kind='bar', ax=ax1, color='skyblue')
ax1.set_title('Average Price by Cluster')
ax1.set_ylabel('Price ($)')

# Occupancy
df.groupby('cluster')['occupancy_rate'].mean().plot(kind='bar', ax=ax2, color='lightgreen')
ax2.set_title('Average Occupancy Rate by Cluster')
ax2.set_ylabel('Occupancy Rate (%)')

plt.tight_layout()
plt.show()


